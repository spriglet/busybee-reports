var REST = require('./REST');
var schema = require('./schema');
var querystring = require('query-string');
var http = require('http');
var url = require('url');
var curl = require('./curl');
var groupby = require('group-array');
var jsonq = require('jsonq');
var basic = require('./basic'); //basic functions for utilities ect..
require('console.table');

module.exports = function(wagner,app) {
  var sitewatch = new REST('./swconfig.js');
  var omit_rpt_cateogry = ['Exterior Wash SVC ','Package Services','Wash Notes','Non-Reported Items','XPT Cash Add/Remove', 
                                       'Wash LPM Headers','UWP Headers']; 
  
ã€€var optionsget = {
            host : '50.240.52.173', // here only the domain name
            port : 5544,
            path : '/index.php', // the rest of the url with parameters if needed
            method : 'GET' // do GET
   };
  // builds the sitewatch REST API 
  var swdata = function(name){       
       return function(data,json){   
          groupby(json,name);
       }
  }
var prepswquery = function(branch,schemas,url,desiredfields){
   
            // Merge the schema based on the query string 
            var reqschema = schema.merge(schemas,'object');
            var queryfields = querydata(url)
              // builds the availabe fields for the schema 
            var fields = buildschemafields(schemas);
            var fields = _.intersection(fields,desiredfields);
            var errors = sitewatch.validateschemaqrystr(reqschema,url);
            request(branch,queryfields,fields,optionsget);
            return errors;
          
}
  // Builds the query strings to be sent to sitewatch. 
  function querydata(urlstr){
      var queryfields = url.parse(urlstr,true).query;   
            //looks at the query fields
       queryfields = _.extend(queryfields,{logdate:queryfields.to+'TO'+queryfields.from.toString()})
       return queryfields;
  }
  function buildschemafields(schemas){
      // builds the availabe fields for the schema 
      var fields = [];
      schemas.forEach(function(s){ Array.prototype.push.apply(fields,s.fields) });
      return fields;
  }
  // Converts the url into something that control system file would accept. 
  function request(path,query,display,optionsget){
      var data = path.substr(("/sitewatch/").length).split('/');
      var queryfields = _.extend(data,{logdate:data.to+'TO'+data.from})
      var swdata = sitewatch.getpathdata('sale');       
      swdata = {'entity':_.intersection(data,swdata.entities),'data':_.intersection(data,swdata.data),'fields':display.join(',').toString()};
      swdata = _.extend(swdata,query); 
      delete  swdata['from'];
      delete swdata['to'];
      optionsget.path ="/index.php"+'?'+querystring.stringify(swdata);
       
    
  }
  function swschema(path,callback){
     
    return sitewatch.getpathschemas(path);
    
  }
  wagner.factory('sitewatch_REST_app',function(){   
     sitewatch.app(function(branch,schemas){
          appget(branch,schemas)
     });
  });
  // employee report
  wagner.factory('sitewatch_sale_employee',function(){    
        // /sitewatch/sale/employee?to=10/10/2015&from=10/10/2015&empnumber=3147
        var path = '/sitewatch/sale/employee';
        swschema(path);
        
  });
  var appget = function(path,url,desiredfields,callback){ 
      var errors= prepswquery(path,swschema(path),url,desiredfields);  
      if(!errors){           
        var jsondata = '';
        curl(optionsget,function(data){     
           callback(data,errors);
        });

      }else{
         callback(false,errors);
      } 
    
  }
   function groupBySaleID(data){
            /* This functions takes a groups of sales records that are generated by sitewatch 
                in a form of JSON and seperates BY Sales ID and returns it in the form of a JSON object. 
            */
           
            var saleIDs = _.unique( _.pluck(data,"SALEID") );
           
            var json = {records:[]};
            for(var saleid in saleIDs) {
                             
                            var record = _.filter(data, function(sale){ return sale.SALEID==saleIDs[saleid]; });
                             var items = [];
                             record.forEach(function(item){
                                   var itemName = item.NAME;
                                   var qty = item.QTY;
                                   var amt  = item.AMT;
                                   var rptcategory = item.NAME_01;
                                  items.push({'NAME':itemName,'QTY':qty,'AMT':amt,'NAME_01':rptcategory});
                             });
                             var sale = record[0];
                             json['records'].push({"SALEID":saleIDs[saleid],"STATUS":sale.STATUS,"ACTUALSALEID":sale.ACTUALSALEID,"items":items });
           
            }
            
            return json;
        }
      
        
        function seperate_by_sale_status(data){
            /*
               This functions takes a group of actual sales and seperates and determines which items are missing from the completed sale. 
               
            */
            var records = data.records;
            var actualsaleid = _.unique( _.pluck(records,"ACTUALSALEID") );                 
            var modSales = [];
            actualsaleid.forEach(function(saleid,index){    
               
                var adjustedSale = _.filter(records, function(sale){ return sale.ACTUALSALEID==saleid && sale.STATUS=="Adjusted"; });
                var completedSale = _.filter(records, function(sale){ return sale.ACTUALSALEID==saleid && ( sale.STATUS.indexOf('C:')>-1 || sale.STATUS.indexOf('I:')>-1 ) ; });
                var A = []; 
                var B = [];
                if(completedSale.length!=0)
                  B =  completedSale[0].items;
                if(adjustedSale.length!=0)  
                  A = adjustedSale[0].items;  
               
                var salesData =   basic.compare(A,B,"NAME");
                var added =  _.map(salesData.added,function(obj){ obj.type='A'; obj.SALEID=saleid; obj.ACTUALSALEID=saleid; return obj;  }   )   ;
                var missing =  _.map(salesData.missing,function(obj){ obj.type='M'; obj.SALEID=saleid; obj.ACTUALSALEID=saleid; return obj;  }   )   ;
                var both =  _.map(salesData.both,function(obj){ obj.type='R'; obj.SALEID=saleid; obj.ACTUALSALEID=saleid; return obj;  }   )   ;
                modSales =  modSales.concat(added,missing,both);
                 
             
               
            });
            
            return modSales
        }
        
        function getSeperatedSaleStatus(data){
        
            var modSales = _.filter(JSON.parse(data), function(sale){ return sale.ACTUALSALEID>0; });
             
            var regularSales =  _.filter(JSON.parse(data), function(sale){ return !sale.ACTUALSALEID>0; });
          
            regularSales = _.map(regularSales,function(obj){ obj.type='R'; return obj;       })
            var json = groupBySaleID( modSales);
           
            var sales = regularSales.concat(seperate_by_sale_status(json));
        
            return sales;
        }
// Sale Fact Employees
wagner.factory('sitewatch_sale_employee_facts',function(){ 
        var path = '/sitewatch/sale/employee/facts';
        app.get(path,function(req,res){
               appget(path,req.url,['saleidfunc','fact.objid','fact.name','salefacts.data'], function(data,errors){
                    if(!data==false){
                      res.send(data);
                     
                     
                    }else
                      res.send(errors);
               });  
        });
  });
  // Sale Fact Items
wagner.factory('sitewatch_sale_item_facts',function(){ 
        var path = '/sitewatch/sale/items/facts';
        app.get(path,function(req,res){
               appget(path,req.url,['saleidfunc','fact.objid','fact.name','salefacts.data'], function(data,errors){
                    if(!data==false){
                      res.send(data);
                     
                     
                    }else
                      res.send(errors);
               });  
        });
});
  
  // Form fields from sitewatch, for example the employees and items ect 
  wagner.factory('form_fields',function(){ 
    
        var form_field_paths = sitewatch.getpaths();
        form_field_paths.forEach(function(path){

            var searchpath = 'sitewatch/formfields/';
            if(path.toString().search(searchpath)){
                var tabtype = path.substring(searchpath.length + 1);
                
                if(sitewatch.gettree('formfields').paths.tabtypes.indexOf(tabtype)!=-1){
                    app.get(path,function(req,res){
                         optionsget.path = '/index.php?file=formfields.php&tabtype='+tabtype.toString();
                         curl(optionsget,function(data){
                             if(!data==false){
                                 res.send(data);
                             }else{
                                 res.send('error on:'+tabtype.toString())
                             }
                             
                         })
                    });
                }
            }   
        });
  });
  
  
  // function for test data. 
  wagner.factory('sitewatch_test_data',function(){
           var sitewatchURL =   '?data=items&data=items2&data=rptcategory&fields=saleid,statuscode,saleidfunc,sale.actualsaleid,rptcategory.name,item.name,saleitems.qty,saleitems.amt&logdate=07/14/2016TO07/14/2016&item2=500383&saleid=12142616'  //
 
           // curl options
           var options = {
                    host : '50.240.52.173', // here only the domain name
                    port : 5544,
                    path : '/index.php'+sitewatchURL, // the rest of the url with parameters if needed
                    method : 'GET' // do GET
            }; 
             curl(options,function(data){
                             if(!data==false){
                                console.log(data)
                             }else{
                                c
                             }
                             
                         })
            
            
  });
  // employee report
  wagner.factory('sitewatch_sale_employee_items',function(){ 
        var path = '/sitewatch/sale/employee/items/rptcategory';
        app.get(path,function(req,res){
               appget(path,req.url,['saleid','saleidfunc','rptcategory.name','statuscode','sale.actualsaleid','item.name','saleitems.qty','saleitems.amt'], function(data,errors){
               
               //appget(path,req.url,['employee.name','employee.code'], function(data,errors){
                    if(!data==false){
                   
                     data =  getSeperatedSaleStatus(data);
                     
                     var salecount = Object.keys(groupby(data,'OBJID') ).length;
                      var test =groupby(data,'NAME_01','NAME');
                      
                      var obj = {'salecount':salecount ,'rptcategories':[]};
                      var family = jsonq(obj);
                    
                      jsonq.each(test,function(key,val){
                          
                        if(omit_rpt_cateogry.indexOf(key)==-1 ){
                             var items =[];    
                            
                             jsonq.each(val,function(k,v){
                                  var qty = 0;
                                  var amt = 0;
                                  var mQty = 0;
                                  var mAmt = 0;
                                  var aAmt = 0;
                                  var aQty = 0;
                                  var regularItems =  _.filter(v,function(item){  return  item.type=='R';     })
                                  regularItems.forEach(function(item){  amt = amt  + item.AMT;  qty = qty + item.QTY;   });
                                  var addedItems =  _.filter(v,function(item){  return  item.type=='A';     })
                                  addedItems.forEach(function(item){  aAmt = aAmt+ item.AMT;  aQty = aQty + item.QTY;   });
                                  var missingItems =  _.filter(v,function(item){  return  item.type=='M';     })
                                  missingItems.forEach(function(item){  mAmt = mAmt+ item.AMT;  mQty = mQty + item.QTY;   });
                                 
                                
                                   items.push({items:{name:k,employee_items:{amount:amt ,quantity:qty,missing_amt:mAmt,missing_quantity:mQty,added_amt:aAmt,added_quantity:aQty } } }); 
                             });
                          
                             family.find('rptcategories').append({report_category:key,items:items},false);
                        }
                       
                      });
                      res.send(obj);
                   
                    }else
                      res.send(errors);
                      
               });  
        });
  });
   // employee report
  wagner.factory('sitewatch_sale_items2_items',function(){ 
        var path = '/sitewatch/sale/employee/items/items2/rptcategory';
        //console.log(sitewatch.getpaths());
        app.get(path,function(req,res){
           
               
             appget(path,req.url,['saleid','saleidfunc','rptcategory.name','statuscode','sale.actualsaleid','item.name','saleitems.qty','saleitems.amt'], function(data,errors){
                   //appget(path,req.url,['employee.name','employee.code'], function(data,errors){
                   
                   if(!data==false){
                  
                      var data =  getSeperatedSaleStatus(data);
                     
                     
                      var salecount = Object.keys(groupby(data,'OBJID') ).length;
                      var test =groupby(data,'NAME_01','NAME');
                    
                      var obj = {'salecount':salecount ,'rptcategories':[]};
                      var family = jsonq(obj);
                    
                      jsonq.each(test,function(key,val){
                          
                        if(omit_rpt_cateogry.indexOf(key)==-1 ){
                             var items =[];    
                            
                             jsonq.each(val,function(k,v){
                                  var qty = 0;
                                  var amt = 0;
                                  var mQty = 0;
                                  var mAmt = 0;
                                  var aAmt = 0;
                                  var aQty = 0;
                                  var regularItems =  _.filter(v,function(item){  return  item.type=='R';     })
                                  regularItems.forEach(function(item){  amt = amt  + item.AMT;  qty = qty + item.QTY;   });
                                  var addedItems =  _.filter(v,function(item){  return  item.type=='A';     })
                                  addedItems.forEach(function(item){  aAmt = aAmt+ item.AMT;  aQty = aQty + item.QTY;   });
                                  var missingItems =  _.filter(v,function(item){  return  item.type=='M';     })
                                  missingItems.forEach(function(item){  mAmt = mAmt+ item.AMT;  mQty = mQty + item.QTY;   });
                                 
                                
                                   items.push({items:{name:k,item_items:{amount:amt ,quantity:qty,missing_amount:mAmt,missing_quantity:mQty,added_amount:aAmt,added_quantity:aQty } } }); 
                             });
                          
                             family.find('rptcategories').append({report_category:key,items:items},false);
                        }
                       
                      });
                      res.send(obj);
                     
                    }else
                      res.send(errors);
                     
               });  
                 
               
        }); 
  });
}